#################################################
# This example demonstates the calculation of   #
# Fibonacci numbers using both iterative and    #
# recursive approaches.                         #
#################################################
fn fib_recur(x: u64): u64 = if (x <= 1) x else fib_recur(x - 1) + fib_recur(x - 2); # LLVM optimizes this into a loop with the "tail call elimination" pass
fn fib_iter(x: u64): u64 = {
  let mut a = 0u64;
  let mut b = 1u64;
  let mut i = 0u64;
  while (i < x) {
    let tmp = b;
    b += a;
    a = tmp;
    ++i; # only prefix increments are supported
  }; # note the semicolon! if you foget it, it's a syntax error!
  a # the block's value is the last expression
};

# if this doesn't return 0, something went wrong
# the colons in the body are casts
fn main(): i32 = (fib_recur(10): i32) - (fib_iter(10): i32);
